name: "Deploy to Staging"
on:
  push:
    branches:
    - main
    - deployment/terraform-cloud-run-config
  pull_request:

env:
  DEPLOYMENT_NAME: reech-matching-engine-ml
  IMAGE_NAME: reech-matching-engine-api

jobs:
  unit_testing:
    name: "Unit testing"
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout"
      uses: actions/checkout@v3
    - run: echo "TODO - Code unit testing ..."

  deployment_gcr:
    name: "Publish docker image to GCR"
    needs: [unit_testing]
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout"
      uses: actions/checkout@v3
    - run: echo "IMAGE=gcr.io/${{ secrets.GOOGLE_PROJECT_ID }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA" >> $GITHUB_ENV

      # authenticate the AIM admin service account to allow terraform to    
      # create a new service account and give it the necessary previleges
    - name: Authenticate the admin user account
      uses: google-github-actions/auth@v0
      with:
        credentials_json: '${{ SECRETS.GOOGLE_SERVICE_ACCOUNT_KEY }}'

      # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
        project_id: '${{ secrets.GOOGLE_PROJECT_ID }}'
        export_default_credentials: true

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    #- run: python3 -m venv venv
    #- run source venv/bin/activate

    # Build the Docker image
    - name: "Docker Build"
      run: |-
        docker build --tag ${{ env.IMAGE }} \
          --build-arg PROJECT_ID_ARG='${{ secrets.GOOGLE_PROJECT_ID }}' \
          --build-arg DATABASE_ARG='${{ secrets.MONGO_DATABASE_URL }}' \
          --build-arg MONGO_DB_ARG='${{ secrets.MONGO_DATABASE_URL }}' \
          --build-arg SMTP_SERVER_ARG='${{ secrets.SMTP_SERVER }}' \
          --build-arg SMTP_PORT_ARG='${{ secrets.SMTP_PORT }}' \
          --build-arg SMTP_USER_ARG='${{ secrets.SMTP_USER }}' \
          --build-arg SMTP_PXWD_ARG='${{ secrets.SMTP_PXWD }}' \
          --build-arg CLOUDINARY_CLOUD_NAME_ARG='${{ secrets.CLOUDINARY_CLOUD_NAME }}' \
          --build-arg CLOUDINARY_API_KEY_ARG='${{ secrets.CLOUDINARY_API_KEY }}' \
          --build-arg CLOUDINARY_API_SECRET_ARG='${{ secrets.CLOUDINARY_API_SECRET }}' \
          --build-arg TAGGED_DOCKER_IMAGE='${{ env.IMAGE }}' \
          --no-cache \
          .
    # Push the Docker image to Google Container Registry
    - name: "Docker Push"
      run: |-
        docker push ${{ env.IMAGE }}

  terraform:
    name: 'Terraform'
    needs: [deployment_gcr]
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is 
    #ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    - run: echo "IMAGE=gcr.io/${{ secrets.GOOGLE_PROJECT_ID }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA" >> $GITHUB_ENV

      # authenticate the AIM admin service account to allow terraform to    
      # create a new service account and give it the necessary previleges
    - name: Authenticate the admin user account
      uses: google-github-actions/auth@v0
      with:
        credentials_json: '${{ SECRETS.GOOGLE_SERVICE_ACCOUNT_KEY }}'

      # Install the latest version of Terraform CLI and configure the 
      # Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Install/Setup Terraform
      uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating 
      # initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./.terraform
      run: terraform init

      # Generate an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./.terraform
      run: |-
        terraform plan \
          -var image=${{ env.IMAGE }} \
          -var project=${{ secrets.GOOGLE_PROJECT_ID }}

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for 
      # "Terraform Cloud". See the documentation on "strict" required status checks for more info:
      # https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      working-directory: ./.terraform
      run: |-
        terraform apply \
          -var project=${{ secrets.GOOGLE_PROJECT_ID }} \
          -var image=${{ env.IMAGE }} \
          -input=false \
          -auto-approve
